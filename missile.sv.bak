module  missile ( 	input Reset, frame_clk, missile1_hit, missile2_hit,
				input [15:0] keycode,
				input [9:0] SHIPX,
				output [9:0]  MISSILE1_X, MISSILE1_Y, MISSILE2_X, MISSILE2_Y,
				output missile_1, missile_2
			);
    
    logic missile1_state, missile2_state;
    logic [3:0] missile_size;
    logic [9:0] missile1_X_Pos, missile1_Y_Motion, missile1_Y_Pos;
    logic [9:0] missile2_X_Pos, missile2_Y_Motion, missile2_Y_Pos;
    logic [9:0] missile_X_Start;
	 
    parameter [9:0] missile_Y_Min=;       // Leftmost point on the Y axis
    parameter [9:0] missile_Y_Max=;     // Rightmost point on the Y axis
    parameter [9:0] missile_Y_Step=8;      // Step size on the Y axis
    parameter [9:0] missil_Y_start=217;		//ship position -3

    assign missile_X_Start = SHIPX - 1;
    assign missile_size = 4'd16;
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin
        if (Reset)  // Asynchronous Reset
        begin 
			missile1_state <= 0;
			missile2_state <= 0;
			missile1_Y_Motion <= 0;
			missile2_Y_Motion <= 0;
        end

        if (missile1_hit)
        begin
			missile1_state <= 0;
			missile1_Y_Motion <= 0;
		end
        if (missile2_hit)
        begin
			missile2_state <= 0;
			missile2_Y_Motion <= 0;
		end

      	else if ((keycode == 8'h20) && (missile1_state == 0) && (missile2_state == 0)) //0 missiles deployed
		begin
			missile1_state <= 1;							
		 	missile1_Y_Motion <= (~missile_Y_Step) + 1'b1;
		 	missile1_Y_Pos <= missile_Y_Start;
		 	missile1_X_Pos <= missile_X_Start;
		end
		else if ((keycode == 8'h20) && (missile1_state == 0) && (missile2_state == 0)) //only 1st missile deployed
		begin
			missile2_state <= 1;							
		 	missile2_Y_Motion <= (~missile_Y_Step) + 1'b1;
		 	missile2_Y_Pos <= missile_Y_Start;
		 	missile1_X_Pos <= missile_X_Start;
		end
		else if ((keycode == 8'h20) && (missile1_state == 0) && (missile2_state == 0)) //only 2nd missile deployed
		begin
			missile1_state <= 1;							
		 	missile1_Y_Motion <= (~missile_Y_Step) + 1'b1;
		 	missile1_Y_Pos <= missile_Y_Start;
		 	missile1_X_Pos <= missile_X_Start;
		end

		else
		begin
			missile1_X_Pos <= missile1_X_Pos;
			missile2_X_Pos <= missile2_X_Pos;
			missile1_Y_Motion <= missile1_Y_Motion;
			missile2_Y_Motion <= missile2_Y_Motion;
		end

		if (missile1_Y_Pos <= 0)
		begin
			missile1_state <= 0;
			missile1_Y_Motion <= 0;
		end
		if (missile2_Y_Pos <= 0)
		begin
			missile2_state <= 0;
			missile2_Y_Motion <= 0;
		end

		missile1_Y_Pos <= (missile1_Y_Pos + missile1_Y_Motion); // Update missile position
		missile2_Y_Pos <= (missile2_Y_Pos + missile2_Y_Motion); // Update missile position 
    end
       
    assign MISSILE1_X = missile1_X_Pos;
    assign MISSILE1_Y = missile1_Y_Pos;
    assign MISSILE2_X = missile2_X_Pos;
    assign MISSILE2_Y = missile2_Y_Pos;
    assign missile_1 = missile1_state;
    assign missile_2 = missile2_state;
    

endmodule
