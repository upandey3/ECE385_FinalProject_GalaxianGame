module  enemy_missile ( 	input Reset, frame_clk, 
				input [15:0] keycode,
				input logic [9:0] enemy_posX [0:23],
				input logic [9:0] enemy_posY [0:23],
				output [9:0]  beam_X, beam_Y,
				output beam_enable
			);
    
    logic beam_state;// beam_state;
    logic [3:0] beam_size;
    logic [9:0] beam_X_Pos, beam_Y_Motion, beam_Y_Pos;
	 
    parameter [9:0] beam_Y_Step=6;     // Step size on the Y axis
    logic [9:0] beam_Y_Start, beam_X_Start;
    assign beam_Y_Start = enemy_posY[23];
    assign beam_X_Start = enemy_posX[23];
    //logic [4:0] d;

    /*
	always_ff @ (posedge frame_clk) 
	begin
    d <= { d[3:0], d[4] ^ d[3] };
	end
	
	always_comb
	begin
		case (d)
             5'd0:
             	begin
             		beam_Y_Start = enemy_posY[23];
             		beam_X_Start = enemy_posX[23];
             	end
             5'd3:
             	begin
             		beam_Y_Start = enemy_posY[22];
             		beam_X_Start = enemy_posX[22];
             	end
             5'd5:
             	begin
             		beam_Y_Start = enemy_posY[21];
             		beam_X_Start = enemy_posX[21];
             	end
             5'd7:
             	begin
             		beam_Y_Start = enemy_posY[20];
             		beam_X_Start = enemy_posX[20];
             	end
			 5'd9:
             	begin
             		beam_Y_Start = enemy_posY[0];
             		beam_X_Start = enemy_posX[0];
             	end
			 5'd11:
             	begin
             		beam_Y_Start = enemy_posY[1];
             		beam_X_Start = enemy_posX[1];
             	end
			 5'd12:
             	begin
             		beam_Y_Start = enemy_posY[2];
             		beam_X_Start = enemy_posX[2];
             	end
			 5'd13:
             	begin
             		beam_Y_Start = enemy_posY[3];
             		beam_X_Start = enemy_posX[3];
             	end
			 5'd14:
             	begin
             		beam_Y_Start = enemy_posY[4];
             		beam_X_Start = enemy_posX[4];
             	end
			 5'd15:
             	begin
             		beam_Y_Start = enemy_posY[5];
             		beam_X_Start = enemy_posX[5];
             	end
			 5'd16:
             	begin
             		beam_Y_Start = enemy_posY[6];
             		beam_X_Start = enemy_posX[6];
             	end
			 5'd17:
             	begin
             		beam_Y_Start = enemy_posY[7];
             		beam_X_Start = enemy_posX[7];
             	end
			 5'd18:
             	begin
             		beam_Y_Start = enemy_posY[8];
             		beam_X_Start = enemy_posX[8];
             	end
			 5'd23:
             	begin
             		beam_Y_Start = enemy_posY[9];
             		beam_X_Start = enemy_posX[9];
             	end
			 5'd24:
             	begin
             		beam_Y_Start = enemy_posY[10];
             		beam_X_Start = enemy_posX[10];
             	end
			 5'd25:
             	begin
             		beam_Y_Start = enemy_posY[11];
             		beam_X_Start = enemy_posX[11];
             	end
			 5'd26:
             	begin
             		beam_Y_Start = enemy_posY[12];
             		beam_X_Start = enemy_posX[12];
             	end
			 5'd27:
             	begin
             		beam_Y_Start = enemy_posY[13];
             		beam_X_Start = enemy_posX[13];
             	end
			 5'd28:
             	begin
             		beam_Y_Start = enemy_posY[14];
             		beam_X_Start = enemy_posX[14];
             	end
			 5'd29:
             	begin
             		beam_Y_Start = enemy_posY[15];
             		beam_X_Start = enemy_posX[15];
             	end
			 5'd30:
             	begin
             		beam_Y_Start = enemy_posY[16];
             		beam_X_Start = enemy_posX[16];
             	end
			 5'd31:
             	begin
             		beam_Y_Start = enemy_posY[17];
             		beam_X_Start = enemy_posX[17];
             	end
			 5'd2:
             	begin
             		beam_Y_Start = enemy_posY[18];
             		beam_X_Start = enemy_posX[18];
             	end
			 5'd4:
             	begin
             		beam_Y_Start = enemy_posY[19];
             		beam_X_Start = enemy_posX[19];
             	end
			              

			default : 
				begin
             		beam_Y_Start = enemy_posY[19];
             		beam_X_Start = enemy_posX[19];
             	end
	     endcase
	end 
	*/
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin
        if (Reset)  // Asynchronous Reset
        begin 
			beam_state <= 0;
			beam_Y_Motion <= 0;
		 	beam_Y_Pos <= beam_Y_Start;
		 	beam_X_Pos <= beam_X_Start;
        end
		  
     else
     begin
			if ((keycode[7:0] == 8'h1d) || (keycode[15:8] == 8'h1d) && (missile1_state == 0))
			beam_state <= 1;							
		 	beam_Y_Motion <= (beam_Y_Step) + 1'b1;
		 	beam_Y_Pos <= beam_Y_Start;
		 	beam_X_Pos <= beam_X_Start;
		
		else if ((beam_Y_Pos <= 0) || (beam_Y_Pos >= 287))
		begin
			beam_state <= 0;
			beam_Y_Motion <= 0;
			beam_Y_Pos <= beam_Y_Start;
		 	beam_X_Pos <= beam_X_Start;
		end
		else
		begin
			beam_X_Pos <= beam_X_Pos;
			beam_Y_Motion <= beam_Y_Motion;
			beam_Y_Pos <= (beam_Y_Pos + beam_Y_Motion);
		end

	
	  end 
    end
       
    assign beam_X = beam_X_Pos;
    assign beam_Y = beam_Y_Pos;
	assign beam_enable = beam_state;

endmodule
